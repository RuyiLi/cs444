// https://introcs.cs.princeton.edu/java/11precedence/

?primary: primary_no_new_array
        | array_creation_expr

array_creation_expr: NEW_KW (primitive_type | type_name) "[" expr "]" // no multidimensional arrays or array initializers

?primary_no_new_array: literal
                     | THIS_KW
                     | "(" expr ")"
                     | class_instance_creation
                     | field_access
                     | method_invocation
                     | array_access



field_access.1: primary "." IDENTIFIER

method_invocation: method_name "(" argument_list? ")"
                 | primary "." IDENTIFIER "(" argument_list? ")"

argument_list: expr ("," expr)*

class_instance_creation: NEW_KW type_name "(" argument_list? ")" class_body?

array_access: (expression_name | primary_no_new_array) "[" expr "]"

?postfix_expr: primary | expression_name

unary_negative_expr: "-" unary_expr

unary_complement_expr: "!" unary_expr


?unary_expr: pre_dec_expr
           | unary_negative_expr
           | unary_expr_not_plus_minus

pre_dec_expr.1: "--" unary_expr     // prioritize over unary_neg

?unary_expr_not_plus_minus: postfix_expr
                          | unary_complement_expr
                          | cast_expr

?cast_expr: "(" primitive_type SQ_BRACKETS? ")" unary_expr
          | "(" array_type ")" unary_expr_not_plus_minus
          | "(" expr ")" unary_expr_not_plus_minus

?mult_expr: unary_expr
          | mult_expr (MUL | DIV | MODULO) unary_expr

?sub_expr: mult_expr
         | sub_expr "-" mult_expr

?add_expr: sub_expr
         | add_expr "+" sub_expr

?rel_expr: add_expr
         | rel_expr (LT | GT | LT_EQ | GT_EQ) add_expr
         | rel_expr INSTANCEOF_KW reference_type

?eq_expr: rel_expr
        | eq_expr (EQ | NOT_EQ) rel_expr

?eager_and_expr: eq_expr
               | eager_and_expr EAGER_AND eq_expr

?eager_or_expr: eager_and_expr
              | eager_or_expr EAGER_OR eager_and_expr

?and_expr: eager_or_expr
         | and_expr LOGICAL_AND eager_or_expr

?or_expr: and_expr
        | or_expr LOGICAL_OR or_expr

assignment: lhs "=" expr

lhs: expression_name
   | field_access
   | array_access

expr: assignment
    | or_expr

