?literal: integer_l
        | boolean_l
        | char_l
        | string_l
        | null_l

integer_l: INT

boolean_l: "true" -> true
        | "false" -> false

char_l: "'" (LETTER | escape_seq) "'"
escape_seq: "\\" (/[btnfr\"\'\\]/ | INT)

string_l: "\"" (LETTER | escape_seq)* "\""

null_l: "null"

// ?java_letter: LETTER | "$" | "_"
// ?java_letter_or_digit: java_letter | DIGIT
// identifier: java_letter java_letter_or_digit*
//      using regex instead so we can get a single string instead of 
//      a bunch of characters in the parse tree
//      unfortunately idk how to use LETTER and DIGIT in the regex
identifier: /[a-zA-Z$_][a-zA-Z0-9$_]+/

?expr:  keyword
        | literal
        | literal operator expr
        | import_statement expr          //temp
        | import_statement               //temp

%import common.DIGIT
%import common.INT
%import common.LETTER
%import common.WS
%ignore WS